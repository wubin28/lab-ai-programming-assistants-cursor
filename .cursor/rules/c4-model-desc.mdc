---
description: 
globs: 
alwaysApply: false
---
# Promptyoo-1 C4 模型架构描述

## Context 层

系统边界：Promptyoo-1 提示词优化应用
- 最终用户：需要优化AI提示词的个人用户
- 外部系统：DeepSeek AI API（提供提示词优化服务）
- 用户动作：提交原始提示词、接收优化后的提示词
- 系统价值：将初始提示词按RABPOC模式进行专业优化，提高提示词效果

## Containers 层

系统分为两个主要容器：

1. 前端应用（Frontend）
   - 基于React 18.x + Vite 5.x + TypeScript 5.x + Tailwind CSS 4.x
   - 提供用户界面，接收原始提示词输入
   - 展示优化结果，支持流式响应
   - 通过API与后端通信

2. 后端服务（Backend）
   - 基于Node.js 20.x + Express 5.x + TypeScript 5.x
   - 接收前端请求，代理与DeepSeek API的通信
   - 处理API Key安全问题
   - 提供RESTful API接口供前端使用

## Components 层

### 前端组件（Frontend Components）

1. 页面组件（Pages）
   - PromptOptimizePage：主页面，整合提示词输入和结果展示功能

2. 功能组件（Components）
   - PromptInputForm：提示词输入表单，包含文本区域和提交按钮
   - OptimizedResultDisplay：优化结果展示组件，支持流式文本显示
   - LoadingIndicator：加载状态指示器

3. 服务层（Services）
   - ApiService：封装与后端API的通信逻辑
   - StreamingService：处理流式响应数据

4. 钩子（Hooks）
   - usePromptOptimization：管理提示词优化状态和逻辑的自定义Hook
   - useStreamingResponse：处理流式响应的自定义Hook

5. 状态管理（State）
   - PromptContext：提示词相关全局状态管理

### 后端组件（Backend Components）

1. 路由层（Routes）
   - PromptRoutes：定义提示词优化API路由

2. 控制器层（Controllers）
   - PromptController：处理提示词优化请求的控制逻辑

3. 服务层（Services）
   - DeepSeekService：封装与DeepSeek API的通信逻辑
   - PromptService：实现提示词处理业务逻辑

4. 中间件（Middleware）
   - ErrorHandlerMiddleware：统一错误处理
   - RateLimiterMiddleware：API请求速率限制
   - CorsMiddleware：跨域资源共享配置

5. 工具类（Utils）
   - PromptFormatter：提示词格式化工具
   - ResponseStreamer：流式响应处理工具

6. 配置（Config）
   - Environment：环境变量配置
   - ApiConfig：API配置参数
