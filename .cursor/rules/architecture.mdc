---
description:
globs:
alwaysApply: true
---
# Project Architecture Rule (方案一：React + Vite + TypeScript + Node.js/Express)

## 架构概述
- 前端：React 18.x + Vite 5.x + TypeScript 5.x + Tailwind CSS 4.x
- 后端：Node.js 20.x + Express 5.x + TypeScript 5.x
- 前后端完全分离，接口通过 RESTful API 通信
- 后端负责代理 AI API，前端不直接暴露 API Key
- 统一使用 TypeScript 保证类型安全
- 代码风格、目录结构、依赖管理、接口规范等均需遵循下述标准

## 前端技术标准（2025 最佳实践）
- 使用 React 18.x 函数组件和 Hooks，禁止使用类组件
- 状态管理优先使用 React Context + useReducer，复杂场景可用 React Query 5.x
- 路由管理使用 React Router v6.x
- 样式优先使用 Tailwind CSS 4.x，禁止全局 CSS，组件内可用 CSS Modules
- 组件拆分粒度适中，复用性强，禁止在组件内直接操作 DOM
- API 请求统一使用 React Query 5.x，所有请求类型定义于 `src/types/api.ts`
- 严格使用 TypeScript 5.x，所有 props、state、API 数据均需类型声明
- 目录结构建议：
  - `src/components/` 复用组件
  - `src/pages/` 页面组件
  - `src/hooks/` 自定义 Hook
  - `src/types/` 类型定义
  - `src/utils/` 工具函数
  - `src/services/` API 封装
- 代码风格遵循 Prettier + ESLint（airbnb 或官方推荐规则）
- 单元测试使用 Vitest + React Testing Library，支持组件和逻辑的高效测试
- 性能优化使用 React.memo, useCallback, useMemo

## 后端技术标准（2025 最佳实践）
- 使用 Node.js 20.x LTS，Express 5.x，TypeScript 5.x
- 路由、控制器、服务、类型分层清晰，目录结构建议：
  - `src/routes/` 路由定义
  - `src/controllers/` 控制器
  - `src/services/` 业务逻辑
  - `src/middleware/` 中间件
  - `src/types/` 类型定义
  - `src/utils/` 工具函数
- 所有 API 接口严格定义输入输出类型，统一错误处理
- API 路径风格遵循 RESTful 规范，返回 JSON
- 环境变量管理使用 dotenv，敏感信息不入库
- 日志记录使用 pino/winston，开发与生产分级
- 代码风格遵循 Prettier + ESLint（airbnb/base 或官方推荐规则）
- 单元测试使用 Jest 30.x，集成 supertest 进行 API 测试
- 安全实践：
  - 使用 helmet.js 设置安全头
  - 实现 API 速率限制
  - 正确配置 CORS
  - 所有用户输入验证和净化

## 通用规范
- 依赖管理使用 pnpm/yarn/npm，锁定依赖版本
- 代码提交前必须通过 lint、type check、单元测试
- 代码注释清晰，重要逻辑需注释
- 统一接口文档（OpenAPI/Swagger 3.1），便于前后端协作
- 遵循 Conventional Commits 标准提交代码
- 使用 Husky 进行预提交钩子检查

## 开发工作流
- 特性分支工作流
- 要求代码审查
- CI/CD 自动化测试和部署
- 使用 Dependabot 进行依赖更新

## AI 集成指南
- 使用最新版本 API（视实际情况而定）
- 实现带版本控制的提示模板
- 适当缓存 API 响应
- 实现 AI 服务错误的适当处理
- 速率限制和成本管理策略

> 本规则为本项目架构与技术标准的唯一权威来源，后续所有开发、讨论、代码生成均需严格遵循本文件内容。
