---
description: 
globs: 
alwaysApply: true
---
# Project Architecture Rule (方案一：React + Vite + TypeScript + Node.js/Express)

> **Rule Type:** Always

## 架构概述
- 前端：React 18 + Vite + TypeScript + Tailwind CSS
- 后端：Node.js + Express + TypeScript
- 前后端完全分离，接口通过 RESTful API 通信
- 后端负责代理 DeepSeek API，前端不直接暴露 API Key
- 统一使用 TypeScript 保证类型安全
- 代码风格、目录结构、依赖管理、接口规范等均需遵循下述标准

---

## 前端技术标准（2025 最佳实践）
- 使用 React 18 函数组件和 Hooks，禁止使用类组件
- 状态管理优先使用 React Context + useReducer，复杂场景可用 Zustand/Recoil
- 路由管理使用 React Router v6
- 样式优先使用 Tailwind CSS，禁止全局 CSS，组件内可用 CSS Modules
- 组件拆分粒度适中，复用性强，禁止在组件内直接操作 DOM
- API 请求统一封装（如 axios/fetch），所有请求类型定义于 `src/types/api.ts`
- 严格使用 TypeScript，所有 props、state、API 数据均需类型声明
- 目录结构建议：
  - `src/components/` 复用组件
  - `src/pages/` 页面组件
  - `src/hooks/` 自定义 Hook
  - `src/types/` 类型定义
  - `src/utils/` 工具函数
  - `src/services/` API 封装
- 代码风格遵循 Prettier + ESLint（airbnb 或官方推荐规则）
- 单元测试优先使用 Vitest（2025年主流，速度快，兼容性好）+ React Testing Library，支持组件和逻辑的高效测试
- 国际化、历史记录等功能后续章节实现，预留扩展点

## 后端技术标准（2025 最佳实践）
- 使用 Node.js 20+，Express 5+，TypeScript 5+
- 路由、控制器、服务、类型分层清晰，目录结构建议：
  - `src/routes/` 路由定义
  - `src/controllers/` 控制器
  - `src/services/` 业务逻辑
  - `src/types/` 类型定义
  - `src/utils/` 工具函数
- 所有 API 接口严格定义输入输出类型，统一错误处理
- API 路径风格遵循 RESTful 规范，返回 JSON
- 环境变量管理使用 dotenv，敏感信息不入库
- 日志记录使用 winston/pino，开发与生产分级
- 代码风格遵循 Prettier + ESLint（airbnb/base 或官方推荐规则）
- 单元测试优先使用 Jest（2025年依然主流，生态完善，支持依赖注入），集成 supertest 进行 API 测试；推荐结合 ts-jest、jest-mock-extended 与 typedi/inversify 等依赖注入库，确保服务、控制器等可独立测试
- 仅暴露必要 API，前端不可直接访问 DeepSeek API Key

## 通用规范
- 依赖管理使用 pnpm/yarn/npm，锁定依赖版本
- 代码提交前必须通过 lint、type check、单元测试
- 代码注释清晰，重要逻辑需中英文注释
- 统一接口文档（如 OpenAPI/Swagger），便于前后端协作
- 预留后续功能扩展点（如 i18n、历史记录、用户系统等）

---

> 本规则为本项目架构与技术标准的唯一权威来源，后续所有开发、讨论、代码生成均需严格遵循本文件内容。

---

# Promptyoo-0 C4 Model 架构要点

## 1. Context 层（系统上下文）
- Promptyoo-0 是一个网页端提示词优化工具，帮助用户通过回答6个问题生成高质量AI提示词。
- 主要参与者：
  - 最终用户：通过浏览器与系统交互，获取优化提示词。
  - DeepSeek API：外部AI服务，由后端安全代理调用。
- 前端与后端完全分离，前端不直接暴露API Key。

## 2. Containers 层（系统容器）
- **前端 Web 应用（React + Vite + TypeScript + Tailwind CSS）**
  - 用户界面、表单交互、结果展示，通过RESTful API与后端通信。
- **后端服务（Node.js + Express + TypeScript）**
  - 处理前端请求，校验输入，代理DeepSeek API，返回优化提示词。
- **DeepSeek API（外部AI服务）**
  - 由后端调用，生成优化后的提示词。
- **本地运行环境**
  - 前后端均可本地开发，依赖管理与环境变量规范化。

## 3. Components 层（组件层，Backend & Frontend）

### Backend 组件拆解
- **API 路由层（src/routes/）**：定义RESTful API路由。
- **控制器层（src/controllers/）**：处理API请求逻辑，参数校验、调用服务层。
- **服务层（src/services/）**：封装与DeepSeek API的交互逻辑。
- **类型定义层（src/types/）**：API输入输出类型声明。
- **工具函数层（src/utils/）**：通用工具、参数校验、日志等。
- **环境变量与配置管理**：dotenv管理敏感信息。
- **日志与错误处理**：winston/pino日志，统一错误响应。
- **单元测试与接口测试**：Jest + supertest，保证各层可测。
- **API文档生成**：如Swagger/OpenAPI，便于协作。
- **扩展点**：历史记录、国际化、用户系统等。

### Frontend 组件拆解
- **页面与路由层（src/pages/）**
  - HomePage：项目介绍、6问表单。
  - ResultPage：展示优化结果。
  - NotFoundPage：未匹配路由处理。
- **复用组件层（src/components/）**
  - QuestionForm：6问输入表单。
  - PromptResult：优化结果展示。
  - LoadingSpinner/ErrorMessage/Header/Footer等。
- **状态管理与上下文（src/context/ 或 src/hooks/）**
  - PromptContext + usePromptReducer：全局状态管理。
  - usePromptApi/useCopyToClipboard等自定义Hook。
- **API服务封装（src/services/）**
  - promptService.ts：与后端API交互。
- **类型定义（src/types/）**
  - api.ts/form.ts：请求响应、表单、props等类型。
- **样式与UI规范**
  - Tailwind CSS优先，组件内可用CSS Modules。
- **工具函数（src/utils/）**
  - 表单校验、格式化等。
- **单元测试（src/__tests__/）**
  - Vitest + React Testing Library，组件和逻辑测试。
- **扩展点**
  - 国际化、历史记录、主题切换等。

---
